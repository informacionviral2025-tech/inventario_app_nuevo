// lib/providers/auth_provider.dart - VERSI√ìN CORREGIDA
// lib/providers/auth_provider.dart - VERSI√ìN CORREGIDA
import 'package:flutter/material.dart';
import '../services/auth_service.dart';

class AuthProvider with ChangeNotifier {
  final AuthService _authService = AuthService();
  dynamic _user; // Cambiado a dynamic para simulaci√≥n
  bool _isLoading = false;
  String? _errorMessage;

  dynamic get user => _user;
  bool get isAuthenticated => _user != null;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  String? get currentUsername => _authService.currentUsername;

  AuthProvider() {
    _initializeAuth();
  }

  void _initializeAuth() {
    debugPrint('üîÑ Inicializando AuthProvider...');
    _authService.printValidUsers();
    debugPrint('‚úÖ AuthProvider inicializado');
  }

  void _setLoading(bool loading) {
    debugPrint('Loading state: $loading');
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String? error) {
    debugPrint('Error state: $error');
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
  }

  /// M√âTODO CORREGIDO - Login con username usando modo simple
  Future<bool> loginWithUsername(String username, String password) async {
    debugPrint('üöÄ AuthProvider: Iniciando login con usuario: $username');
    
    _setLoading(true);
    _clearError();

    try {
      if (username.trim().isEmpty || password.trim().isEmpty) {
        debugPrint('‚ùå Usuario o contrase√±a vac√≠os');
        _setError('Usuario y contrase√±a son requeridos');
        _setLoading(false);
        return false;
      }

      if (!_authService.isValidUser(username.trim())) {
        debugPrint('‚ùå Usuario no v√°lido: $username');
        _setError('Usuario no v√°lido. Usuarios disponibles: ${_authService.validUsernames.join(", ")}');
        _setLoading(false);
        return false;
      }

      debugPrint('‚úÖ Usuario v√°lido, procediendo con autenticaci√≥n...');
      final user = await _authService.signInWithUsernameSimple(username, password);
      
      if (user != null) {
        debugPrint('‚úÖ AuthProvider: Login exitoso para usuario: $username');
        _user = user;
        _clearError();
        _setLoading(false);
        return true;
      } else {
        debugPrint('‚ùå AuthProvider: Login fall√≥ para usuario: $username');
        _setError('Usuario o contrase√±a incorrectos');
        _setLoading(false);
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå AuthProvider: Error en login: $e');
      _setError('Error inesperado: $e');
      _setLoading(false);
      return false;
    }
  }

  /// M√âTODO ALTERNATIVO - Login simple para testing
  Future<bool> loginWithUsernameSimple(String username, String password) async {
    debugPrint('üöÄ AuthProvider: Login simple con usuario: $username');
    
    _setLoading(true);
    _clearError();

    try {
      final user = await _authService.signInWithUsernameSimple(username, password);
      
      if (user != null) {
        debugPrint('‚úÖ Login simple exitoso');
        _user = user;
        _clearError();
        _setLoading(false);
        return true;
      } else {
        _setError('Usuario o contrase√±a incorrectos');
        _setLoading(false);
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå Error en login simple: $e');
      _setError('Error en autenticaci√≥n: $e');
      _setLoading(false);
      return false;
    }
  }

  Future<bool> login(String email, String password) async {
    _setLoading(true);
    _clearError();
    _setError('M√©todo no disponible en modo prueba');
    _setLoading(false);
    return false;
  }

  /// Cerrar sesi√≥n
  Future<void> logout() async {
    debugPrint('üöÄ Cerrando sesi√≥n...');
    _setLoading(true);

    try {
      _user = null;
      _clearError();
      debugPrint('‚úÖ Sesi√≥n cerrada exitosamente');
    } catch (e) {
      debugPrint('‚ùå Error en logout: $e');
      _setError('Error cerrando sesi√≥n');
    } finally {
      _setLoading(false);
    }
  }

  bool isValidUser(String username) {
    return _authService.isValidUser(username);
  }

  List<String> get validUsernames => _authService.validUsernames;

  bool verifyCredentials(String username, String password) {
    final validUsers = {
      'admin': 'admin123',
      'gerente': 'gerente123',
      'empleado': 'empleado123',
      'supervisor': 'supervisor123',
      'almacenero': 'almacen123',
    };
    
    final userLower = username.toLowerCase().trim();
    return validUsers.containsKey(userLower) && 
           validUsers[userLower] == password.trim();
  }

  void debugCurrentState() {
    debugPrint('=== ESTADO ACTUAL AUTH PROVIDER ===');
    debugPrint('Usuario autenticado: $isAuthenticated');
    debugPrint('Usuario actual: ${_user?.toString() ?? 'null'}');
    debugPrint('Username actual: ${currentUsername ?? 'null'}');
    debugPrint('Cargando: $_isLoading');
    debugPrint('Error: ${_errorMessage ?? 'ninguno'}');
    debugPrint('Usuarios v√°lidos: ${validUsernames.join(", ")}');
    debugPrint('====================================');
    _authService.debugAuthState();
  }
}